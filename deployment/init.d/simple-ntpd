#!/bin/bash
#
# Simple NTP Daemon init.d script
# Copyright 2024 BLBurns <contact@blburns.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

### BEGIN INIT INFO
# Provides:          simple-ntpd
# Required-Start:    $network $remote_fs
# Required-Stop:     $network $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Simple NTP Daemon
# Description:       A lightweight, cross-platform Network Time Protocol daemon
### END INIT INFO

# Script configuration
NAME="simple-ntpd"
DAEMON="/usr/local/bin/simple-ntpd"
DAEMON_ARGS="start"
PIDFILE="/var/run/simple-ntpd.pid"
LOCKFILE="/var/lock/subsys/simple-ntpd"
CONFIGFILE="/etc/simple-ntpd/simple-ntpd.conf"
USER="ntp"
GROUP="ntp"

# Source function library
. /etc/init.d/functions

# Check if daemon exists
[ -x "$DAEMON" ] || exit 5

# Check if config file exists
[ -f "$CONFIGFILE" ] || exit 6

# Function to create required directories
create_directories() {
    mkdir -p /var/log/simple-ntpd
    mkdir -p /var/lib/simple-ntpd
    mkdir -p /var/run/simple-ntpd
    chown -R $USER:$GROUP /var/log/simple-ntpd
    chown -R $USER:$GROUP /var/lib/simple-ntpd
    chown -R $USER:$GROUP /var/run/simple-ntpd
    chmod 755 /var/log/simple-ntpd
    chmod 755 /var/lib/simple-ntpd
    chmod 755 /var/run/simple-ntpd
}

# Function to start the daemon
start() {
    echo -n "Starting $NAME: "
    
    # Create required directories
    create_directories
    
    # Check if already running
    if [ -f "$PIDFILE" ]; then
        PID=$(cat "$PIDFILE")
        if kill -0 "$PID" 2>/dev/null; then
            echo "already running (PID: $PID)"
            return 0
        else
            rm -f "$PIDFILE"
        fi
    fi
    
    # Start the daemon
    daemon --user "$USER" --pidfile "$PIDFILE" "$DAEMON" $DAEMON_ARGS
    RETVAL=$?
    
    if [ $RETVAL -eq 0 ]; then
        echo "done"
        touch "$LOCKFILE"
    else
        echo "failed"
    fi
    
    return $RETVAL
}

# Function to stop the daemon
stop() {
    echo -n "Stopping $NAME: "
    
    if [ -f "$PIDFILE" ]; then
        PID=$(cat "$PIDFILE")
        if kill -0 "$PID" 2>/dev/null; then
            kill -TERM "$PID"
            sleep 2
            
            # Check if still running
            if kill -0 "$PID" 2>/dev/null; then
                echo "force killing"
                kill -KILL "$PID"
                sleep 1
            fi
            
            if ! kill -0 "$PID" 2>/dev/null; then
                echo "done"
                rm -f "$PIDFILE"
                rm -f "$LOCKFILE"
                return 0
            else
                echo "failed"
                return 1
            fi
        else
            echo "not running"
            rm -f "$PIDFILE"
            rm -f "$LOCKFILE"
            return 0
        fi
    else
        echo "not running"
        return 0
    fi
}

# Function to restart the daemon
restart() {
    stop
    sleep 1
    start
}

# Function to reload configuration
reload() {
    echo -n "Reloading $NAME configuration: "
    
    if [ -f "$PIDFILE" ]; then
        PID=$(cat "$PIDFILE")
        if kill -0 "$PID" 2>/dev/null; then
            kill -HUP "$PID"
            echo "done"
            return 0
        else
            echo "not running"
            return 1
        fi
    else
        echo "not running"
        return 1
    fi
}

# Function to check status
status() {
    if [ -f "$PIDFILE" ]; then
        PID=$(cat "$PIDFILE")
        if kill -0 "$PID" 2>/dev/null; then
            echo "$NAME is running (PID: $PID)"
            return 0
        else
            echo "$NAME is not running (stale PID file)"
            return 1
        fi
    else
        echo "$NAME is not running"
        return 3
    fi
}

# Function to check configuration
configtest() {
    echo -n "Testing $NAME configuration: "
    
    if [ -f "$CONFIGFILE" ]; then
        if "$DAEMON" --test-config --config "$CONFIGFILE" >/dev/null 2>&1; then
            echo "OK"
            return 0
        else
            echo "FAILED"
            return 1
        fi
    else
        echo "FAILED (config file not found)"
        return 1
    fi
}

# Main script logic
case "$1" in
    start)
        start
        RETVAL=$?
        ;;
    stop)
        stop
        RETVAL=$?
        ;;
    restart)
        restart
        RETVAL=$?
        ;;
    reload)
        reload
        RETVAL=$?
        ;;
    status)
        status
        RETVAL=$?
        ;;
    configtest)
        configtest
        RETVAL=$?
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|reload|status|configtest}"
        echo ""
        echo "Commands:"
        echo "  start       - Start the daemon"
        echo "  stop        - Stop the daemon"
        echo "  restart     - Restart the daemon"
        echo "  reload      - Reload configuration"
        echo "  status      - Show daemon status"
        echo "  configtest  - Test configuration file"
        exit 2
        ;;
esac

exit $RETVAL
