# Travis CI configuration for simple-ntpd
# Simple NTP Daemon - A lightweight and secure NTP server
# Copyright 2024 SimpleDaemons

# Language and version
language: cpp
compiler:
  - gcc
  - clang

# Operating systems
os:
  - linux
  - osx

# Build matrix for different configurations
matrix:
  include:
    # Linux GCC
    - os: linux
      compiler: gcc
      dist: focal
      env: BUILD_TYPE=Release
    - os: linux
      compiler: gcc
      dist: focal
      env: BUILD_TYPE=Debug
    # Linux Clang
    - os: linux
      compiler: clang
      dist: focal
      env: BUILD_TYPE=Release
    - os: linux
      compiler: clang
      dist: focal
      env: BUILD_TYPE=Debug
    # macOS
    - os: osx
      osx_image: xcode12.3
      env: BUILD_TYPE=Release
    - os: osx
      osx_image: xcode12.3
      env: BUILD_TYPE=Debug

# Cache dependencies
cache:
  - apt
  - ccache
  - directories:
    - $HOME/.ccache
    - $HOME/.cache/pip

# Before install dependencies
before_install:
  # Update package lists
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      sudo apt-get update -qq
    fi

# Install dependencies
install:
  # Linux dependencies
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      sudo apt-get install -y -qq build-essential cmake libssl-dev libjsoncpp-dev pkg-config
      sudo apt-get install -y -qq clang-format cppcheck python3-pip
      pip3 install --user bandit semgrep
    fi
  # macOS dependencies
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew update
      brew install cmake openssl jsoncpp clang-format cppcheck
      pip3 install --user bandit semgrep
    fi

# Before script
before_script:
  # Create build directory
  - mkdir -p build
  - cd build

# Script to run
script:
  # Configure CMake
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_COMPILER=$CXX
    else
      cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
    fi
  # Build
  - make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)
  # Test
  - make test
  # Code formatting check
  - make check-style
  # Static analysis
  - make lint
  # Security scan
  - make security-scan

# After script
after_script:
  # Show build artifacts
  - ls -la build/
  - ls -la dist/ || true

# Notifications
notifications:
  email:
    on_success: change
    on_failure: always
  webhooks:
    urls:
      - https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
    on_success: change
    on_failure: always

# Branches to build
branches:
  only:
    - main
    - master
    - develop
    - /^v\d+\.\d+.*$/

# Environment variables
env:
  global:
    - CCACHE_COMPRESS=1
    - CCACHE_DIR=$HOME/.ccache
    - CCACHE_MAXSIZE=200M

# Addons
addons:
  apt:
    packages:
      - build-essential
      - cmake
      - libssl-dev
      - libjsoncpp-dev
      - pkg-config
      - clang-format
      - cppcheck
      - python3-pip
  homebrew:
    packages:
      - cmake
      - openssl
      - jsoncpp
      - clang-format
      - cppcheck

# Services
services:
  - docker

# Deploy configuration (example for GitHub releases)
deploy:
  provider: releases
  api_key: $GITHUB_TOKEN
  file_glob: true
  file: dist/*
  skip_cleanup: true
  on:
    tags: true
    condition: $BUILD_TYPE = Release
